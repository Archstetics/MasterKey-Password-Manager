import db_manager
import password_crypt_hash
import password_generator
import getpass
import sys
import psycopg2
import os
import clipboard
from PyInquirer import prompt

questions = [
    {
        'type': 'list',
        'name': 'pass',
        'message': 'Welcome, have you already set your hashed master password in password_encoder.py?',
        'choices': ['yes', 'no']
    },
    {
        'type': 'list',
        'name': 'generate',
        'message': 'Do you prefer to have your password generated by the program or do you want to create it yourself?',
        'choices': ['I choose it', 'generate it automatically']
    },
    {
        'type': 'list',
        'name': 'menu',
        'message': 'Choose an option:',
        'choices': ['Add new account.',
            'List all registered accounts.',
            'Generate a secure password.', 
            'Search account password.',
            'Reset service account name.',
            'Reset username.',
            'Reset password.',
            'Reset url.',
            'Delete account.',
            'Exit.'
            ]
    },
    {
        'type': 'list',
        'name': 'password',
        'message': 'Password details:',
        'choices': ['Characters only.',
            'Characters and numbers.',
            'Characters and special characters.', 
            'Characters, numbers and special characters.'
            ]
    }]

def master_password_init(questions):
    os.system('clear')
    answer = prompt(questions[0])

    if answer['pass'] == 'no':
        os.system('clear')
        answer = prompt(questions[1])

        if answer['generate'] == 'I choose it':
            new_master_password_input = getpass.getpass('Enter your new master password: ')
            hashed_password = password_crypt_hash.hash_master_password(new_master_password_input)
            clipboard.copy(hashed_password)
            print('Your new master password is: ', new_master_password_input)
            print('Your hashed master password is: ', hashed_password)
            print('The hashed master password has been copied to the clipboard. Enter it in password_crypt_hash.py and remember the master password.')
            sys.exit()

        elif answer['generate'] == 'generate it automatically':
            lenght = int(input("Enter the password length: "))
            password = password_generator.generate_password_digit_punct(lenght)
            hashed_password = password_crypt_hash.hash_master_password(password)
            clipboard.copy(hashed_password)
            print('Your new master password is: ', password)
            print('Your hashed master password is: ', hashed_password)
            print('The hashed master password has been copied to the clipboard. Enter it in password_crypt_hash.py and remember the master password.')
            sys.exit()

def login():
    master_password_input = getpass.getpass("Login with your master password: ")
    if password_crypt_hash.check_master_password(master_password_input, password_crypt_hash.master_password_hashed) == True:
        try:
            connection = db_manager.connect_to_db()
            os.system('clear')
            print('\n', '-----------------------------------------------------', '\n')
            print(' Sucessfully Authenticated.')
            print('\n', '-----------------------------------------------------', '\n')
            return connection
        except (Exception, psycopg2.Error) as error:
            os.system('clear')
            print(error)
            sys.exit()
    else:
        os.system('clear')
        print("Authentication failed. Try to run the program again.")
        sys.exit()

def main(questions):
    master_password_init(questions)
    connection = login()
    answer = {'menu': None}

    while answer['menu'] != 'Exit.':
        answer = prompt(questions[2])

        if answer['menu'] == 'Add new account.':
            account = input('Enter the account service name: ')
            userid = input('Enter the username: ')
            passwd = getpass.getpass('Enter the password: ')
            site_url = input('Enter the URL: ')
            encrypted_password = str(password_crypt_hash.encrypt_password(passwd, password_crypt_hash.master_password_hashed))
            db_manager.insert_new_account(account, userid, encrypted_password, site_url, connection)

        if answer['menu'] == 'List all registered accounts.':
            db_manager.print_table(connection)
            sys.exit()

        if answer['menu'] == 'Generate a secure password.':
            password_generator_answer = prompt(questions[3])
            lenght = int(input('Enter the number of characters: '))
            if password_generator_answer['password'] == 'Characters only.':
                password = password_generator.generate_password(lenght)

            if password_generator_answer['password'] == 'Characters and numbers.':
                password = password_generator.generate_password_digit(lenght)

            if password_generator_answer['password'] == 'Characters and special characters.':
                password = password_generator.generate_password_punct(lenght)

            if password_generator_answer['password'] == 'Characters, numbers and special characters.':
                password = password_generator.generate_password_digit_punct(lenght)

            clipboard.copy(password)
            os.system('clear')
            print('\n', '-----------------------------------------------------', '\n')
            print(' Your new secure password is:', password)
            print(' The password has been copied to the clipboard.')
            print('\n', '-----------------------------------------------------', '\n')

        if answer['menu'] == 'Search account password.':
            account = input('Account name: ')
            os.system('clear')
            db_manager.get_user_id_password(account, connection)
        
        if answer['menu'] == 'Reset service account name.':
            account = input('Old account name: ')
            new_account = input('enter new account name: ')
            os.system('clear')
            db_manager.reset_account(new_account, account, connection)

        if answer['menu'] == 'Reset username.':
            account = input('Account name: ')
            new_user_id = input('enter new username: ')
            os.system('clear')
            db_manager.reset_user_id(new_user_id, account, connection)

        if answer['menu'] == 'Reset password.':
            account = input('Account name: ')
            new_passwd = getpass.getpass('Enter the password: ')
            os.system('clear')
            encrypted_password = str(password_crypt_hash.encrypt_password(new_passwd, password_crypt_hash.master_password_hashed))
            db_manager.reset_password(encrypted_password, account, connection)

        if answer['menu'] == 'Reset url.':
            account = input('Account name: ')
            new_url = input('enter new Url: ')
            os.system('clear')
            db_manager.reset_url(new_url, account, connection)

        if answer['menu'] == 'Delete account.':
            account = input('Enter the name of the account you want to delete: ')
            os.system('clear')
            db_manager.delete_account(account, connection)

main(questions)